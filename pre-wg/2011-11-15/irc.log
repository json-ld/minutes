[3:59pm]	voip-ld: Gregg Kellogg (SIP/sip2sip.info-00000003) is in the conference.
[3:59pm]	voip-ld: Gregg Kellogg (SIP/sip2sip.info-00000003) has joined the conference.
[4:00pm]	voip-ld: Markus Lanthaler (SIP/sip.linphone.org-00000004) has joined the conference.
[4:01pm]	niklasl joined the chat room.
[4:01pm]	voip-ld: Niklas Lindstr√∂m (SIP/sip2sip.info-00000005) has joined the conference.
[4:01pm]	voip-ld: David I. Lehn (SIP/71.171.20.178-00000006) has joined the conference.
[4:02pm]	<gkellogg>	Agenda: http://lists.w3.org/Archives/Public/public-linked-json/2011Nov/0022.html
[4:02pm]	<gkellogg>	chair: gkellogg
[4:04pm]	<gkellogg>	scribe: MarkusLanthaler
[4:04pm]	<gkellogg>	topic: ISSUE-35: JSON Vocabulary / Data Round-tripping
[4:04pm]	<gkellogg>	Issues with data representation in JavaScript - issues with representing numbers.
[4:04pm]	<gkellogg>	https://github.com/json-ld/json-ld.org/issues/35
[4:04pm]	<MarkusLanthaler>	Markus: The problem was with the lexical representation of types, maybe we should resolve on something reasonably based on TURTLE syntax?
[4:04pm]	<MarkusLanthaler>	MarkusLanthaler: http://www.w3.org/TR/turtle/#abbrev
[4:05pm]	<MarkusLanthaler>	... Decimal floating point double/fixed precision numbers may be written directly and correspond to the XML Schema Datatype xsd:double in both syntax and datatype IRI.
[4:05pm]	<MarkusLanthaler>	... Decimal floating point arbitrary precision numbers may be written directly and correspond to the XML Schema Datatype xsd:decimal. in both syntax and datatype IRI.
[4:04pm]	<MarkusLanthaler>	dlehn: Isn't the problem here that your implementation may serialize as "1" instead of "1.0"?
[4:07pm]	<MarkusLanthaler>	Niklas: If you wanna keep precision you should explicitly coerce to type
[4:09pm]	<niklasl>	for example, coercing like this - "age": "xsd:double" - but how would you do these?
[4:09pm]	<niklasl>	"age": 33
[4:09pm]	<gkellogg>	33.0e1
[4:09pm]	<niklasl>	"33.0"^^xsd:double
[4:09pm]	<gkellogg>	3.3e1
[4:10pm]	<gkellogg>	{"foo": 3.}
[4:11pm]	<niklasl>	"3"^^xsd:integer
[4:11pm]	<MarkusLanthaler>	Gregg: The problem is JSON could be ambiguous, the problem is with round-tripping. If we have any coercion in place that trumps the format, in the absence of coercion, if you have a document that expresses a number, how do you round trip it? Like how would "3." be interpreted above?
[4:11pm]	<MarkusLanthaler>	Gregg: Depends on parser...
[4:11pm]	<MarkusLanthaler>	Niklas: If you want to preserve the exact lexical representation, you have to do this (which is fine):
[4:12pm]	<niklasl>	"foo": {"@literal": "3.", "@datatype": "xsd:decimal"}
[4:12pm]	<niklasl>	:foo 3
[4:12pm]	<MarkusLanthaler>	Niklas: If you would like have a explicit RDF output you would have to use the above form
[4:12pm]	<niklasl>	foo: 3
[4:12pm]	<niklasl>	foo: 3.0
[4:14pm]	<MarkusLanthaler>	Niklas: Most JSON parsers would give you just the integer, but it would depend on the programming language. We could have some rule in place that says that everything should be normalized.
[4:14pm]	<MarkusLanthaler>	According to http://jsonlint.com/ that's translated to foo: 3
[4:16pm]	<MarkusLanthaler>	Markus: I think if we would make JSON-LD work as Turtle in automatic typing I think it would solve our problems. Right now, we always coerce to a double.
[4:18pm]	<MarkusLanthaler>	http://json-ld.org/spec/latest/json-ld-syntax/#automatic-typing
[4:19pm]	<MarkusLanthaler>	Gregg: Do you think this can be done unambiguously? Do you think that we can unambiguously decide between xsd:double and xsd:decimal?
[4:19pm]	<MarkusLanthaler>	Markus: We currently automatically type to integer, double or boolean.
[4:19pm]	<MarkusLanthaler>	... Why don't we distinguish between double and decimal?
[4:22pm]	<niklasl>	denormalized JSON | normalized JSON or Turtle short form | explicitly typed Turtle
[4:22pm]	<niklasl>	3.3e10 | 3.3e1 | "3.3e1"^^xsd:double
[4:22pm]	<niklasl>	1.10 | 1.1 | "1.1"^^xsd:decimal
[4:22pm]	<niklasl>	1.0 | 1 | "1"^^xsd:integer
[4:24pm]	<niklasl>	3.30e1 | 3.3e1 | "3.3e1"^^xsd:double
[4:24pm]	<MarkusLanthaler>	Markus: 3.3e10 | 3.3e10 | "3.3e10"^^xsd:double
[4:24pm]	<MarkusLanthaler>	... 3.31e1 | 3.31e1 | "3.31e1"^^xsd:double
[4:24pm]	<MarkusLanthaler>	Gregg: I suggest that we say how to coerce into integer, double and boolean - and include a warning that if round-tripping is expected, that an explicit coercion rule is included.
[4:26pm]	<taaz>	I'm not sure what we're discussing here! The differences in JSON parsers and serializers are going to cause pain anyway you look at it unless you use explicit typing. You are not going to know what the intended value is going to be - you can only support this if you are going to explicitly type things.
[4:24pm]	<MarkusLanthaler>	Niklas: Two reasons for having automatic typing - one for normalization, two for conversion to RDF.
[4:24pm]	<MarkusLanthaler>	Gregg: This needs to be in the syntax spec, because that's what authors are going to use. To have a fixed lexical representation, you should have an object with a literal and a datatype.
[4:24pm]	<MarkusLanthaler>	Niklas: Is decimal a subset of the value space of double?
[4:24pm]	<MarkusLanthaler>	Gregg: yes, it is.
[4:24pm]	<MarkusLanthaler>	dlehn: Yes.
[4:24pm]	<MarkusLanthaler>	niklas: If we do normalization on the value, and it doesn't have a decimal point, it's always a "double". If it doesn't have a decimal point, then it's an integer. If you are fine with this, then you can use explicit JSON values... if not, you should specify a datatype like xsd:decimal.
[4:24pm]	<MarkusLanthaler>	Gregg: This is what the spec already says. Can we leave it as is for now and re-open the issue if we need to in the future?
[4:27pm]	<niklasl>	Yes, we're looking into if there is any "baseline" in JSON or if we have to specify it all.
[4:31pm]	<gkellogg>	PROPOSAL: No change to specification, current language on auto-coercion is fine
[4:31pm]	<niklasl>	+1
[4:31pm]	<gkellogg>	+1
[4:31pm]	<taaz>	+1
[4:31pm]	<MarkusLanthaler>	+1
[4:31pm]	<gkellogg>	RESOLVED: No change to specification, current language on auto-coercion is fine
[4:32pm]	<gkellogg>	topic: ISSUE-40: Merge @coerce with @context
[4:32pm]	<gkellogg>	https://github.com/json-ld/json-ld.org/issues/40
[4:32pm]	<MarkusLanthaler>	Gregg: We had agreed to change @coerce, for example, change to this:
[4:33pm]	<gkellogg>	"@context": {
[4:33pm]	<gkellogg>	  "title": "http://purl.org/dc/terms/title",
[4:33pm]	<gkellogg>	  "description": "http://purl.org/dc/terms/description",
[4:33pm]	<gkellogg>	  "identifier": {"http://purl.org/dc/terms/identifier": "xsd:string"},
[4:33pm]	<gkellogg>	  "publisher": {"http://purl.org/dc/terms/publisher": "@iri"},
[4:33pm]	<gkellogg>	  "created": {"http://purl.org/dc/terms/created": "xsd:dateTime"},
[4:33pm]	<gkellogg>	  "authorList": {"http://purl.org/ontology/bibo/authorList": ["@list", "@iri"]}
[4:33pm]	<gkellogg>	}
[4:33pm]	<MarkusLanthaler>	Gregg: The key is the IRI and the value is the type, an alternative is:
[4:33pm]	<gkellogg>	 "authorList": {"http://purl.org/ontology/bibo/authorList": { "@list": "@iri" }}
[4:34pm]	<gkellogg>	"created": { "@iri" : "http://purl.org/dc/terms/created", "@coerce": "xsd:dateTime"}
[4:34pm]	<MarkusLanthaler>	Gregg: Alternative: value is object, this says @list entries are of type @iri, I like Markus' form because it's more consistent.
[4:35pm]	<MarkusLanthaler>	Niklas: Really prefer the form where you use "@iri" as the key - it's concise.
[4:35pm]	<niklasl>	https://raw.github.com/rinfo/rdl/1c8c6d2/packages/java/rinfo-service/src/main/resources/json-ld/context.json
[4:35pm]	<niklasl>	https://raw.github.com/gist/1340408/context-vocab-array-combined-iri-coerce.json
[4:37pm]	<MarkusLanthaler>	Gregg: @vocab would have to specified prior to be used in the context (in a outer context). That is, if we use terms in the @context, the active context must be used to expand the terms.
[4:38pm]	<MarkusLanthaler>	Niklas: You have to look up the keys in the active context while you're parsing @context.
[4:38pm]	<MarkusLanthaler>	Gregg: Point is when is the active context modified. I think it should be modified before the currently processed context has been fully processed
[4:39pm]	<MarkusLanthaler>	Niklas: Regardless if we merge coerce and prefix definitions or not it can't be processed in one pass
[4:41pm]	<MarkusLanthaler>	Niklas: We should discuss: 1) if we merge @coerce into term definitions 2) if @list is in array or object form? 3) How do you parse a list of contexts, how is @vocab handled when in a list?
[4:41pm]	<gkellogg>	PROPOSAL: Move coercion rules into the term definitions section of @context
[4:41pm]	<niklasl>	+1
[4:41pm]	<gkellogg>	+1
[4:41pm]	<taaz>	(I'm afraid i haven't put enough thought into this to vote)
[4:41pm]	<MarkusLanthaler>	+1
[4:42pm]	<gkellogg>	RESOLVED: Move coercion rules into the term definitions section of @context
[4:45pm]	<MarkusLanthaler>	Gregg: @vocab would have to come before it's used for stream-based parsers - it wouldn't be used to expand keys in @context.
[4:45pm]	<MarkusLanthaler>	Niklas: that's also applies to expansion in coerce - SAX-based processors are going to have issues in any case - it's always two-pass.
[4:46pm]	<MarkusLanthaler>	Gregg: Current processing requires us to know the entire @context before processing it.
[4:46pm]	<MarkusLanthaler>	Niklas: I found it useful to have many contexts... especially for using groups of terms.
[4:46pm]	<MarkusLanthaler>	Niklas: also useful for keeping memory usage low - by processing in chunks. Any given chunk needs to be processed in its entirety.
[4:47pm]	<MarkusLanthaler>	Gregg: Looking at your list of contexts in the example - an array of contexts. At parse time, there is an active context, parsing the first item in the array would update the active context. All terms @vocabs/@base would the first part would take effect after each array item is processed.
[4:49pm]	<MarkusLanthaler>	Niklas: I implemented it so that first @vocab is taken to expand values, then term definitions are parsed
[4:50pm]	<MarkusLanthaler>	Gregg: That would mean processing a context would be a multi-pass operation. The first step is to extract any @vocab definition, the second step is to process all prefix to URI definitions using the active context, the third step is to process coercion/datatype mapping.
[4:54pm]	<niklasl>	https://github.com/rinfo/rdl/blob/develop/packages/java/rinfo-base/src/main/groovy/se/lagrummet/rinfo/base/rdf/jsonld/JSONLDContext.groovy
[4:50pm]	<MarkusLanthaler>	Markus: I don't like the use of @vocab/@base in expanding values in @context
[4:55pm]	<gkellogg>	PROPOSAL: Parsing @context is a multi-pass process. First pass sets the term mappings, second pass resolves the @datatypes.
[4:55pm]	<gkellogg>	+1
[4:55pm]	<niklasl>	+1
[4:55pm]	<taaz>	+1
[4:56pm]	<MarkusLanthaler>	+1
[4:56pm]	<niklasl>	What about? { "foaf": "foaf:foo"}
[4:57pm]	<MarkusLanthaler>	{ "a" : "b:c", "b" : "a:c" }
[4:59pm]	<MarkusLanthaler>	Niklas: There is still a problem, see above - we don't need to process @vocab in @context.
[4:59pm]	<MarkusLanthaler>	Gregg: First pass, unless "a" and "b" are already defined - they are IRIs.
[4:59pm]	<MarkusLanthaler>	Niklas: Datatypes are not an issue, but if we remove @vocab and wanted a shortened form - we would have to define something to look in the key position. It would be fairly complicated...
[4:59pm]	<gkellogg>	ACTION: Discuss that prefixes can't be used for expanding URIs within the same context, unless they're part of @datatype portion.
[4:59pm]	<MarkusLanthaler>	Niklas: @vocab is useful tool for context writers - everything that is not defined as a term is resolved against @vocab. We could have @vocab work within the context - you could declare lots of terms more easily.
[5:01pm]	<gkellogg>	PROPOSAL: @vocab is resolved prior to term URI expansion within a @context.
[5:02pm]	<niklasl>	+1
[5:02pm]	<gkellogg>	+1
[5:02pm]	<MarkusLanthaler>	-1
[5:02pm]	<taaz>	+0
[5:05pm]	<niklasl>	This is a possibility, right? @context: [{foaf: ‚Ä¶, dc: ‚Ä¶}, {"title: "dc:title", "homepage": "foaf:homepage"}]
[5:02pm]	<MarkusLanthaler>	Gregg: We shouldn't split "prefix" and "term" - let's not over-complicate anything.
[5:05pm]	<gkellogg>	ACTION: Define prefixes required for expansion in context definitions prior to use.
[5:06pm]	<MarkusLanthaler>	Gregg: If we are doing it that way we could also go back to single-pass processing (for datatype expansion)
[5:06pm]	<gkellogg>	this removes the need to do 2-pass @context processing.
[5:08pm]	<MarkusLanthaler>	Gregg: Ok, so something like this:
[5:08pm]	<gkellogg>	"created": { "@iri" : "http://purl.org/dc/terms/created", "@coerce": "xsd:dateTime"}
[5:08pm]	<MarkusLanthaler>	Markus: Other options:
[5:08pm]	<gkellogg>	"created": { "@iri" : "http://purl.org/dc/terms/created", "@type": "xsd:dateTime"}
[5:09pm]	<gkellogg>	"created": { "@iri": "dc:created", "@datatype": "xsd:dateTime"}
[5:09pm]	<gkellogg>	I think "@iri" makes sense - it's consistent.
[5:09pm]	<MarkusLanthaler>	niklas: I favor the compact form - I spend most of my time writing contexts. If you're not using prefixes, it's completely unreadable because they're gigantic. 
[5:10pm]	<MarkusLanthaler>	niklas: What about if we do this?
[5:10pm]	<MarkusLanthaler>	"created": [ "http://purl.org/dc/terms/created", { "@type": "xsd:dateTime"} ]
[5:10pm]	<MarkusLanthaler>	"created": [ "http://purl.org/dc/terms/created", { "@coerce": "xsd:dateTime"} ]
[5:12pm]	<gkellogg>	This makes it more readable, right? "created": {"dc:created": "xsd:dateTime"}
[5:12pm]	<MarkusLanthaler>	"created": {"http://purl.org/dc/terms/created": "http://www.w3.org/2001/XMLSchema#dateTime"},
[5:14pm]	<MarkusLanthaler>	Markus: Could we push this back to the mailing list? This isn't something I'd loose that much sleep over - but would like to think about this for a while. I'm also concerned about markup like this:
[5:14pm]	<niklasl>	"created": {"@iri": "dc:created", "@datatype": "xsd:dateTime", "@array": "@list"}
[5:15pm]	<niklasl>	"created": {"@iri": "dc:created", "@datatype": "xsd:dateTime", "@list": true}
[5:15pm]	<niklasl>	"created": {"@iri": "dc:created", "@datatype": "xsd:dateTime", "@rev": true, "@set": true}
[5:15pm]	<MarkusLanthaler>	Niklas: The @set might be more interesting - seeing some usability issues w/ my developers. 
[5:15pm]	<niklasl>	Niklas: I'll try these changes in my implementation.
[5:15pm]	<MarkusLanthaler>	Gregg: We'll keep working on ISSUE-40 via the mailing list.
[5:18pm]	voip-ld: Gregg Kellogg (SIP/sip2sip.info-00000003) has left the conference.
[5:18pm]	voip-ld: Niklas Lindstr√∂m (SIP/sip2sip.info-00000005) has left the conference.
[5:18pm]	voip-ld: Markus Lanthaler (SIP/sip.linphone.org-00000004) has left the conference.
[5:18pm]	voip-ld: David I. Lehn (SIP/71.171.20.178-00000006) has left the conference.
[5:18pm]	<taaz>	voip-ld: connections?
[5:18pm]	voip-ld: There are currently no conference connections.
[5:19pm]	<taaz>	voip-ld: self-destruct
[5:19pm]	voip-ld left the chat room. (Quit: Auuugh! *booooom*)
[5:19pm]	MarkusLanthaler left the chat room.
