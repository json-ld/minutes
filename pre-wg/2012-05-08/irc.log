[10:06]	<manu1>	Agenda: http://lists.w3.org/Archives/Public/public-linked-json/2012May/0001.html
[10:06]	<manu1>	scribe: manu1
[10:07]	<manu1>	manu: Any additions or changes to the agenda?
[10:07]	<manu1>	markus: Should we address the syntax-related ones first?
[10:07]	<manu1>	niklasl: I can only be here for one hour.
[10:08]	<manu1>	manu: Rearrange the agenda to deal with syntax issues...
[10:08]	<manu1>	gkellogg: Let's talk about the ones that Niklas wants to weigh in on.
[10:09]	<manu1>	Topic: ISSUE-115: Expanded form - expand all native types to @value form?
[10:09]	<manu1>	https://github.com/json-ld/json-ld.org/issues/115
[10:10]	<manu1>	markus: This issue came up in IRC, discussion about framing - there are different ways to express a value in JSON-LD - plain literals, or a JSON number, etc. Directly as a property value or via @value - in expanded form.
[10:10]	<manu1>	gkellogg: With regard to @graph, it was an issue with subject references - should it be in expanded form {"@id": "http://graph.id/foo/bar"} or just "http://graph.id/foo/bar" - the @value issue is only one of the issues.
[10:11]	<manu1>	gkellogg: Does expanded form really mean "expanded", or do we do some amount of compaction in expanded form?
[10:11]	<manu1>	markus: I always saw expanded form in as just IRI expansion.
[10:12]	<mlnt>	Not just IRI expansion but primarily IRI expansion
[10:12]	<manu1>	manu: the intent in the beginning for expanded form was to have a regular data structure that you could easily code against - the more regular, the easier it is.
[10:13]	<manu1>	markus: My issue with this is that we may not want to go all the way on this - we may want to do a slight amount of compaction.
[10:14]	<manu1>	manu: we have two issues here 1) whether or not to expand @graph to have a value of a JSON object with "@id" in it in expanded form, and 2) whether or not all values get expanded to a JSON object containing "@value" in expanded form.
[10:15]	<manu1>	manu: one concern that you have, Markus, is the amount of overhead expanded form has.
[10:15]	<manu1>	markus: Most of the time you just deal with the native datatypes and that is enough - that is, expanded form is not very useful for JSON developers.
[10:16]	<manu1>	niklasl: Would regular JSON developers like to deal with expanded form at all?
[10:16]	<manu1>	manu: Would they want to use compact form more often?
[10:16]	<manu1>	niklasl: Yes, the shape of RDF/JSON is always predictable - but it's illegible for anyone expecting plain old JSON. The expanded form of JSON-LD is very similar to RDF/JSON in expanded form.
[10:17]	<manu1>	niklasl: I don't think we should expand anything that is predictable in a less expanded form... which kind of developer are we catering for...
[10:17]	<manu1>	markus: That's a bit difficult, everyone has their own idea on how this is going to be used.
[10:18]	<manu1>	niklasl: Based on the shape of the expanded form, we should expect that people want to get it into their JS and just do something with it... this is an information exchange format for extremely detailed info.
[10:18]	<manu1>	markus: Since all IRIs are expanded, it makes it very useful.
[10:18]	<manu1>	niklasl: Yes, but only if you want to express the RDF description - it's middleware.
[10:19]	<manu1>	gkellogg: it's not the type of JSON that a developer would typically expect... that's what framing and compaction are for. Expansion is to get something in a more normal form so it can be further processed. Every time I have a property, the value is expressed as an array of objects - that simplifies things.
[10:20]	<manu1>	niklasl: Yes, exactly, you should always be able to know what to look at next - normal form is good.
[10:23]	<manu1>	Manu explains the logic behind the current direction.
[10:25]	<manu1>	markus: Example of how this makes things simpler?
[10:25]	<manu1>	Manu explains converting to n-triples and branching.
[10:27]	<manu1>	gkellogg: This not only applies to N-Triples - you have to check the value of each property - is it a number, a boolean, a string, or a JSON object? There is going to be branching, but it does simplify the logic in the program.
[10:27]	<manu1>	niklasl: If we don't do this, but allow plain values directly - you'd have to first check if it is an object - it's a more complex algorithm if we mix the types.
[10:28]	<manu1>	niklasl: This is very consistent with how similar formats work - SPARQL and RDF/JSON - there is a regularity in their shapes.
[10:30]	<manu1>	manu: I think there is broad agreement between Gregg, Niklas, Dave Longley and myself on this being the proper direction.
[10:32]	<manu1>	markus: I won't block if you guys agree - still have a hard time seeing the value in this.
[10:32]	<manu1>	manu: We can always rewind this decision later if it turns out to be a bad idea.
[10:33]	<manu1>	markus: So, @id, @type, and possibly @graph are the only things that are not expanded to @value form?
[10:33]	<manu1>	gkellogg: Still need to discuss @graph, but yes.
[10:33]	<manu1>	markus: hmm
[10:33]	<manu1>	manu: There hasn't been much support for literals as identifiers over the past 10 years... mint a new IRI scheme if you need to -myid:FooBar
[10:35]	<manu1>	PROPOSAL: In general, for expansion, ensure that all property values are expressed in expanded value form (e.g. {"@value"; 5}, {"@value"; "foo"}, {"@id"; "http;//example.com/"}) with the exception of @id and @type.
[10:36]	<gkellogg>	+1
[10:36]	<niklasl>	+1
[10:36]	<manu1>	+1
[10:36]	<mlnt>	+0
[10:36]	<manu1>	RESOLVED: In general, for expansion, ensure that all property values are expressed in expanded value form (e.g. {"@value": 5}, {"@value": "foo"}, {"@id": "http://example.com/"}) with the exception of @id and @type.
[10:38]	<voip-ld>	Dave Lehn (SIP/6003-0000009c) has joined the conference.
[10:39]	<manu1>	manu: Next question we need to address is whether or not @graph is expanded value form in expansion.
[10:40]	<manu1>	markus: Is there any reason to have graph expanded?
[10:40]	<manu1>	manu: It's more modular code to process it if we express it in expanded value form - and we have a clear way of supporting literal names for graphs.
[10:41]	<manu1>	gkellogg: Postel's rule - strict in what you generate, lenient in what a processor does.
[10:42]	<manu1>	manu: Authors/processors must not generate this in expanded form: "@graph": "http://foo.bar/" - but a processor must read that as an IRI if it sees it.
[10:43]	<manu1>	gkellogg: In the case of @graph, my processor acts as if there is a coercion to @id (it can be a relative IRI), or you could use a fragment ID in that case.
[10:44]	<manu1>	manu: Is this the right way to go, Markus?
[10:44]	<manu1>	markus: Based on the previous train of logic, yes.
[10:45]	<manu1>	PROPOSAL: In expanded form, @graph must be expressed in expanded value form (e.g. "@graph"; [{"@id"; "http;//example.com/foo#graph}])
[10:45]	<gkellogg>	+1
[10:45]	<manu1>	+1
[10:45]	<niklasl>	+1
[10:45]	<mlnt>	+0.5
[10:45]	<manu1>	RESOLVED: In expanded form, @graph must be expressed in expanded value form (e.g. "@graph": [{"@id": "http://example.com/foo#graph}])
[10:45]	<taaz>	+0
[10:46]	<manu1>	markus: When compacting what happens?
[10:46]	<manu1>	gkellogg: Act as if there is a coercion to @id
[10:47]	<manu1>	gkellogg: if we were to accept values, which we don't currently, they would be kept in expanded form - for numbers, booleans, (if that would ever make sense) - keep it in expanded form.
[10:48]	<manu1>	niklasl: It's worth noticing, this doesn't result in any RDF...
[10:49]	<manu1>	gkellogg: We have this so you could name a linked graph - a property that references a graph with an IRI - this thing names the reference resource using the @id of the object containing graph.
[10:49]	<manu1>	markus: Wouldn't it be easier to understand if we keep the expanded form in this case?
[10:49]	<manu1>	niklasl: I think so - in compact form, we should keep this shape.
[10:50]	<mlnt>	"@graph": "http://example.com/foo#graph"
[10:50]	<manu1>	mlnt: That is ambiguous, right?
[10:50]	<manu1>	gkellogg: It's not ambiguous, processing rules tell you exactly how to treat that...
[10:50]	<manu1>	markus: If you know the spec, then yes - but for someone that doesn't know what's going on - they're not going to understand that that's a graph that is elsewhere?
[10:50]	<mlnt>	{ "prop": "test", "@graph": "http://example.com/foo#graph" }
[10:51]	<manu1>	niklasl: If I just glanced at it, I'd expect that to be the graph identifier.
[10:51]	<manu1>	gkellogg: Yeah, I see.
[10:52]	<manu1>	gkellogg: If we want to allow a linked representation of graphs - if I have one document that names a graph that is identified as being in another document - having that as an IRI is a natural way to express that, right?
[10:52]	<manu1>	gkellogg: We could make that illegal - this seems like a HTTPRange-14 issue - you can't interpret the document w/o the reference to it to interpret the document.
[10:53]	<manu1>	markus: I'm saying that we shouldn't compact that by default.
[10:53]	<manu1>	gkellogg: Maybe that's a named graph with no content - how would I express that I'm not identifying an empty graph - I'm referencing another document.
[10:53]	<manu1>	niklasl: This seems like a conflation between syntax and semantics. I can't really see the use case for this.
[10:54]	<manu1>	gkellogg: The problem with named graphs is that there is only one name - what is the context in which you're naming - in WikiData, they want to name each statement with it's own provenance - it requires the SNIK to be encapsulated inside another object that contains provenance information.
[10:55]	|<--	bergie has left freenode (Ping timeout: 252 seconds)
[10:55]	<manu1>	gkellogg: Having stuff at the granularity where you're naming makes it more difficult - you want a different dimension on name in that case - being able to remotely reference a graph allows you to have the same triples associated within the same context - if you only have one dimension of naming, you can't do that.
[10:56]	<manu1>	niklasl: I don't see why this specific construct addresses your use case, Gregg. Seems like you need reification to solve that.
[10:56]	<manu1>	gkellogg: reification seems like it's being obsoleted.
[10:57]	<manu1>	gkellogg: This comes back to the notion of JSON-LD being Linked Data and the ability to link to graphs being named.
[10:57]	<manu1>	gkellogg: It's not simply an object or an array of objects, but also potentially subject references that could be strings that are IRIs.
[10:58]	<manu1>	gkellogg: Fundamental question is do we want to enable linking to external documents and naming them using the named graph syntax, or not? If not, is there some better way to express the intention that the subject reference is intended to have the document dereferenced.
[10:58]	<niklasl>	... "@graph": [ {"@id": "http://example.com/foo#graph, "@graph": [ {"@id": s, p: o} ] }, ... ]
[10:58]	<manu1>	Topic: ISSUE-114: Values space of keywords
[10:58]	<manu1>	https://github.com/json-ld/json-ld.org/issues/114
[10:58]	<niklasl>	(the above is a graph of graphs, each triple in its own named graph)
[10:59]	<manu1>	markus: This is not really an issue - more of trying to get an understanding - what's the value space of the different keywords? Does @type support just strings, or arrays of objects?
[10:59]	<manu1>	markus: I want us to all agree on the value space of all of our keywords.
[11:00]	<manu1>	gkellogg: The case for @type and @id is if it can accept {"@id": "http://example.com"} ?
[11:00]	<niklasl>	q+
[11:00]	<voip-ld>	Added niklasl to the speaker queue: niklasl
[11:00]	<manu1>	ack niklasl
[11:00]	<voip-ld>	niklasl has the floor. The speaker queue is empty.
[11:01]	<manu1>	niklasl: Given postels law coming up before - we might want to define the value space of the keywords - but accept something more. We allow stranger values to appear, but we turn them back into something not awful.
[11:03]	<manu1>	manu: The concern is making implementations more complex.
[11:03]	<manu1>	niklasl: Yes, XHTML vs. HTML5.
[11:04]	<manu1>	manu: The goal would be to try and standardize the way weird things are interpreted in JSON-LD.
[11:04]	<manu1>	gkellogg: There is syntactic normality and then semantic normality - this has more to do with semantic normality.
[11:05]	<manu1>	gkellogg: Like, do we allow arrays for @id? We say it's not valid, but then we might say that if a JSON-LD processor sees it, pick the first item in the array.
[11:05]	<manu1>	niklasl: Yes, we could do something like that.
[11:06]	<manu1>	gkellogg: We could have a part in the API spec that states how a processor reacts when it meets multiple values when it expects a single value. If it expects a string and is presented with an object, then it deals with it in another way.
[11:09]	<manu1>	Discussion about value spaces described in ISSUE-114 by Markus.
[11:10]	<manu1>	General agreement that the list generated by Markus is good, modulo that @graph shouldn't allow "string" and @list and @set should be expanded upon to make it more clear about the types of permutations allowed.
[11:10]	<manu1>	markus: Should we throw an exception when value space is messed up?
[11:11]	<manu1>	gkellogg: No, we have a "recovery value space" - so, if somebody uses {"@id": "http://schema.org/Person"} w/ @type, we can still interpret it - exception is thrown in strict mode, otherwise modified in lax mode.
[11:12]	<manu1>	markus: If you turn of @type in fromRDF - I don't know why we'd support coercion to @type later on.
[11:12]	<manu1>	gkellogg: We have to support coercion of keywords to other things - normal JSON allows a context for that.
[11:12]	<manu1>	niklasl: Are you talking about coercion to type @type.
[11:13]	<manu1>	markus: a JSON document won't have RDF type in there.
[11:13]	<manu1>	gkellogg: Is Postel's law built into JSON-LD - when parsing input, are we forgiving of the form of that input?
[11:13]	<manu1>	gkellogg: Do we turn it into a more normal form or not - that's what strict mode does - it allows you to be pedantic about your input.
[11:14]	<manu1>	gkellogg: However, in lax mode - we should do what we can to allow it... if the value-space is that of a subject definition or subject reference - it's to be interpreted as an IRI.
[11:15]	<manu1>	niklasl: If it's unambiguous, we can do something about it.
[11:15]	<manu1>	markus: Yes, but implementers need to know when to throw an exception.
[11:16]	<manu1>	markus: We should discuss the most forgiving mode the implementation has to support - we should discuss the least forgiving case as well and what the value space there is.
[11:17]	<manu1>	gkellogg: I think we accept things that are not in array form - that is, when the author's intention is clear then we should support the transformation.
[11:18]	<manu1>	manu: As a general rule - we're saying: If the author's intent is clear, we should transform it into proper JSON-LD.
[11:18]	<manu1>	niklasl: Maybe we should call it 'preferred' form instead of 'strict'.
[11:18]	<manu1>	Discussion about what "form" means...
[11:19]	<manu1>	niklasl: The "preferred form" is the way you should express your form... but we read in forms that are non-preferred, but in which the author's intent is clear.
[11:19]	<manu1>	markus: My concern when I wrote this issue was to define the input value space for a processor.
[11:23]	<manu1>	PROPOSAL: In general, if the author's intent is clear, we should transform the input into proper JSON-LD (keeping the processor mode, if any, in mind - in strict mode, throw exceptions, in lax mode, attempt to interpret the value).
[11:23]	<gkellogg>	+1
[11:23]	<manu1>	+1
[11:23]	<niklasl>	+1
[11:23]	<mlnt>	+1 for the first part
[11:23]	<taaz>	+0
[11:23]	* niklasl	gotta run; thanks for the discussion
[11:23]	<manu1>	RESOLVED: In general, if the author's intent is clear, we should transform the input into proper JSON-LD (keeping the processor mode, if any, in mind - in strict mode, throw exceptions, in lax mode, attempt to interpret the value).
[11:24]	<--|	niklasl has left #json-ld
[11:24]	<voip-ld>	Niklas Lindström (SIP/82.182.71.107-0000009b) has left the conference.
[11:24]	<manu1>	gkellogg: We need a way to make the test suite set processor mode flags.
[11:24]	<manu1>	markus: What about when you expect that an exception should be thrown?
[11:25]	<manu1>	gkellogg: nope, not yet - need to update the test suite.
[11:25]	<manu1>	ISSUE-81: Data round tripping issue (not enough precision)
[11:26]	<manu1>	https://github.com/json-ld/json-ld.org/issues/81
[11:26]	<manu1>	gkellogg: I think we agreed that when expanding, the value is kept as-is last week. We don't convert when expanding/compacting or framing. That moved the issue to RDF conversion.
[11:26]	<manu1>	gkellogg: I think Dave Longley said that we should add options that express how to deal with each of the different primitive datatypes.
[11:27]	<manu1>	markus: That was about which datatype is used - xsd:boolean or xsd:integer - but not about %1.15E.
[11:29]	<manu1>	gkellogg: There is a normalized form for each of the XSD types - normalized form is very close to %1.15E - trailing zeroes in the fractional part are trimmed, extra leading zeros in mantissa are trimmed as well. %1.15E always uses two characters and then all 15 digitals.
[11:29]	<manu1>	markus: Couldn't we just say that we rely on the underlying toString() function to convert to decimal string?
[11:30]	<manu1>	gkellogg: if all implementations do the same thing, yes - if not we can't do that.
[11:32]	<manu1>	gkellogg: We're going to/from the abstract syntax - the representation of a decimal is the abstract representation - a string with a datatype %1.15E
[11:33]	<manu1>	gkellogg: If I go to/from TURTLE, there may be no transformation made when we turn it into the expanded form - Markus' point is that by requiring this format transformation, we're doing something different from other RDF representation - why not just use toString().
[11:33]	<manu1>	gkellogg: Our tests are testing the value-space, but not the abstract value space.
[11:36]	<manu1>	Discussion on what underlying JSON implementations use to support doubles - 32-bit, 64-bit, or 128-bit...
[11:40]	<manu1>	markus: I don't have a strong opinion about 64-bit or 128-bit conversions.
[11:41]	<manu1>	markus: Why don't we express the output as a 64-bit floating point representation?
[11:41]	<manu1>	gkellogg: Any processor should be able to express 1.15E consistently - if we don't do that and rely upon toString() - someone might implement tests against values and twootherwise-conforming implementations might fail.
[11:42]	<manu1>	gkellogg: from a practicality point of view - we can't just do JSON value-space conformance tests...
[11:43]	<mlnt>	https://github.com/json-ld/json-ld.org/issues/81#issuecomment-4686154
[11:49]	<manu1>	PROPOSAL: When converting toRDF(), any value that is a JSON number that has a fractional value MUST be treated as an xsd;double using the printf("%1.15E", number) representation.
[11:49]	<gkellogg>	+1
[11:49]	<manu1>	+1
[11:49]	<mlnt>	+0
[11:49]	<taaz>	+0
[11:49]	<manu1>	RESOLVED: When converting toRDF(), any value that is a JSON number that has a fractional value MUST be treated as an xsd:double using the printf("%1.15E", number) representation.
[11:50]	<manu1>	Topic: ISSUE-112: Define mandatory API parameters (options)
[11:50]	<manu1>	https://github.com/json-ld/json-ld.org/issues/112
[11:50]	<manu1>	gregg: I think having mandatory options is a bit odd - if it's an option, it's not mandatory.
[11:51]	<manu1>	manu: We can't necessarily do that for something like base IRI - well, I guess we could specify that the default for base IRI is "_:"?
[11:52]	<manu1>	gregg: Or if the base IRI is not set, the processor should try to use the base IRI of the document if it is known.
[11:53]	<manu1>	gregg: For the fromRDF() case, you may have flags like "@boolean" - the use of that, results in a native JSON representation.
[11:53]	<manu1>	gregg: There are options to control this behavior for each native type.
[11:54]	<manu1>	markus: This is fine - but we have to specify this somewhere. The base has to be passed if the document is passed as an already parsed object and it has IRIs in it.
[11:54]	<manu1>	gregg: So you're saying, if a document is parsed that does not have a location, then the base IRI must be set to an absolute IRI.
[11:54]	<manu1>	markus: We require it all the time, or we throw an exception when you find a relative IRI.
[11:55]	<manu1>	gregg: In TURTLE, it's common for the output to be output in relative form. I don't see another RDF processor that requires that a base IRI be provided.
[11:56]	<manu1>	manu: Why don't we just use "_:" as the base IRI.
[11:56]	<manu1>	markus: That requires us to remap all blank nodes in expansion?
[11:56]	<manu1>	gregg: yeah.
[11:56]	<manu1>	gregg: We could say that behavior is processor-dependent - I typically default it to example.com.
[11:57]	<manu1>	gregg: That allows you to take a format that you can see - allows you to see that it's illegal.
[11:58]	<manu1>	markus: If we don't expand it to a full IRI or blank node, it's properties would get dropped.
[11:59]	<manu1>	manu: We could set it to 'http://'
[11:59]	<manu1>	markus: Is it really bad to throw an exception in this case?
[11:59]	<manu1>	manu: Not really, no.
[11:59]	<voip-ld>	Manu Sporny (SIP/6000-00000098) has left the conference.
[11:59]	* manu1	crap.
[12:00]	<voip-ld>	Gregg Kellogg (SIP/10.0.1.18-00000099) has left the conference.
[12:00]	<voip-ld>	Markus Lanthaler (SIP/sip.linphone.org-0000009a) has left the conference.
[12:00]	<voip-ld>	Manu Sporny (SIP/6000-0000009d) has joined the conference.
[12:00]	<voip-ld>	Markus Lanthaler (SIP/sip.linphone.org-0000009e) has joined the conference.
[12:01]	<voip-ld>	Gregg Kellogg (SIP/10.0.1.18-0000009f) has joined the conference.
[12:02]	<manu1>	manu: I think the playground sets the base IRI
[12:03]	<manu1>	markus: Why not just set it to the document IRI, and then "http://example.com/" if that doesn't exist - I don't think developers would have an issue with that?
[12:03]	<manu1>	gkellogg: In this case, I treat it as if it is an absolute IRI w/o validating it as such.
[12:04]	<manu1>	markus: Can a property ever be a relative IRI?
[12:04]	<manu1>	gkellogg: In my case, it's not a property - if a property is a relative IRI, it's dropped. For subjects and objects are expanded relative to base, but in the absence of base, they're just used directly.
[12:06]	<manu1>	markus: If you specify a relative IRI via @id in the @context, what happens.
[12:06]	<mlnt>	{ "@context": { "term": { "@id": "relative" } } }
[12:07]	<manu1>	manu: It's resolved against base.
[12:08]	<manu1>	PROPOSAL: There are no mandatory options in the JSON-LD API. Defaults must be specified for all options passed to JSON-LD API methods.
[12:08]	<gkellogg>	+1
[12:08]	<mlnt>	+1
[12:08]	<manu1>	+1
[12:09]	<taaz>	+0
[12:09]	<manu1>	RESOLVED: There are no mandatory options in the JSON-LD API. Defaults must be specified for all options passed to JSON-LD API methods.
[12:11]	<gkellogg>	{"@id": "#foo", "@type": "bar"}
[12:11]	<gkellogg>	@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
[12:11]	<gkellogg>	<#foo> a <bar> .
[12:12]	<manu1>	PROPOSAL: The default for the base IRI for JSON-LD API methods is the current document IRI if in a browser context, or the empty string if there is no document context.
[12:12]	<gkellogg>	+1
[12:12]	<manu1>	+1
[12:12]	<mlnt>	+1
[12:12]	<taaz>	+1
[12:12]	<manu1>	RESOLVED: The default for the base IRI for JSON-LD API methods is the current document IRI if in a browser context, or the empty string if there is no document context.

