[10:01]	<manu1>	Agenda: http://lists.w3.org/Archives/Public/public-linked-json/2012Apr/0031.html
[10:01]	<manu1>	scribe: manu1
[10:01]	-->|	niklasl (~neuron@gate.kb.se) has joined #json-ld
[10:01]	<voip-ld>	Niklas Lindstr√∂m (SIP/10.10.73.138-00000064) has joined the conference.
[10:04]	<manu1>	manu: any updates or changes to the agenda?
[10:05]	<manu1>	gregg: We need to go back over the resolved issues and make sure that we can close remaining open issues. Can we close them, or what further action should be taken to close them? Or are they obsolete?
[10:05]	<manu1>	Markus: Regarding the test suite - should we do the split of the test suite?
[10:06]	<voip-ld>	David I. Lehn (SIP/96.240.182.44-00000065) has joined the conference.
[10:06]	<manu1>	Manu: I'd rather keep that in the current website for now - keep them all in the same place.
[10:07]	<manu1>	gregg: We could use git submodules, but that gets annoying.
[10:08]	|<--	lgierth has left freenode (Ping timeout: 265 seconds)
[10:08]	<manu1>	markus: It takes a while to download the website.
[10:08]	<manu1>	manu: We could update the php to package up the test suite and download it.
[10:09]	<manu1>	niklas: I agree with Gregg - working with it online or working with it as a web app has been very beneficial. If I have to run tests locally, I want to be able to check in copies of the tests to the repo - so I agree with Gregg.
[10:09]	<taaz>	btw, if git is too slow, github has a zip you can download. may be faster?
[10:10]	<manu1>	taaz: It's on the main page - you can download it.
[10:10]	<manu1>	niklas: It would be beneficial if it was just the manifest and the tests.
[10:10]	<manu1>	Topic: ISSUE-91: Re-definition of keywords
[10:11]	<manu1>	https://github.com/json-ld/json-ld.org/issues/91
[10:11]	<niklasl>	q+
[10:11]	<voip-ld>	Added niklasl to the speaker queue: niklasl
[10:12]	<manu1>	ack niklasl
[10:12]	<voip-ld>	niklasl has the floor. The speaker queue is empty.
[10:12]	<manu1>	manu: This is about changing how JSON-LD keywords work - redefining keywords.
[10:13]	<manu1>	niklasl: General problem I have is with rdf:type - as it is a regular relation. Not being able to re-define @type is fine with me, if you can create a regular keyword and map it forrdf:type.
[10:13]	<manu1>	niklasl: I do it in the third example in the issue. I don't really know if the algorithm supports this.
[10:13]	<manu1>	niklasl: If i need to control the way rdf:type is used in compact form, can I?
[10:14]	<manu1>	markus: Currently in compaction/expansion, nothing would prevent you from doing the thing in your 3rd example.
[10:14]	<manu1>	niklasl: Would my definition of @type take precedence over @type.
[10:14]	<gkellogg>	q+
[10:14]	<voip-ld>	Added gkellogg to the speaker queue: gkellogg
[10:15]	<manu1>	markus: If you have @type in your document and you expand it, it doesn't get expanded to rdf:type in your document - they don't collide.
[10:16]	<manu1>	gregg: @type without a ??? is just another property - there is no issue in JSON-LD, the issue comes in when you round-trip.
[10:16]	<manu1>	niklas: I can live with that from a matching point of view - when I compact, what is going to happen? Can I always force rdf:type to always be a set?
[10:18]	<manu1>	gkellogg: If you define something like 'a', then it will work just like any other definition.
[10:18]	<manu1>	niklas: In my first two examples - they emulate what @type does, right?
[10:18]	-->|	MacTed (~Thud@63.119.36.36) has joined #json-ld
[10:18]	<manu1>	gkellogg: No, @type doesn't expand... whereas 'a' would.
[10:19]	<manu1>	niklasl: In the 3rd example, I used 'rdf:type' without using '@type'.
[10:20]	-->|	tilgovi (~randall@couchdb/developer/tilgovi) has joined #json-ld
[10:20]	<manu1>	Discussion around 3rd example and round-tripping.
[10:24]	<manu1>	ack gkellogg
[10:24]	<voip-ld>	gkellogg has the floor. The speaker queue is empty.
[10:25]	<manu1>	manu: It seems like this usage patter is a little strange.
[10:26]	<manu1>	gkellogg: You can support this with a frame.
[10:26]	-->|	lgierth (~lgierth@89.246.67.229) has joined #json-ld
[10:27]	<manu1>	gkellogg: The other question here is why we treat @type differently from other properties?
[10:28]	<manu1>	niklasl: That's what I'm asking here.
[10:29]	<manu1>	gkellogg: It might be good to specify @type as another property - this might create issues for framing, where framing requires a particular pattern.
[10:30]	<manu1>	niklas: Someone on-list asked for something to this effect.
[10:31]	<manu1>	niklasl: We could solve this, but would have to be careful about not complicating things.
[10:31]	<manu1>	niklas: If someone defines another term for rdf:type, then it should be treated like any other property.
[10:31]	<manu1>	gkellogg: That's too much special magic - we either demote @type to be just like any property, or you use framing.
[10:33]	<manu1>	niklas: We have special casing for @type already, it's just where to put it.
[10:33]	<manu1>	markus: If you look at this from a JSON perspective, it's the other way around.
[10:33]	<manu1>	niklasl: If you look at it from a Linked Data perspective, @type represents a link - and you can have that as a subject, you can have multiple types, etc.
[10:34]	<manu1>	niklas: Unlike other relations, you can't say that you'd always want it as a set container. If we want to change @type back to a property, we may want to move things back from @type to @datatype
[10:35]	<manu1>	gkellogg: @type means two things, based on where it is used - if it's @type it might be in a value, it might be in array form, in other cases, it might not be in array form. If we went back to @datatype, we wouldn't have to complicate the code.
[10:35]	<manu1>	gkellogg: If we make @type in objects be like other properties, it would reduce complexity.
[10:36]	<manu1>	manu: So the pseudo-proposal is re-introduce @datatype.
[10:37]	<manu1>	gkellogg: yes, that would reduce code complexity - but we should ask Dave Longley about this first.
[10:37]	<manu1>	markus: Why do we have @type at all then?
[10:38]	<manu1>	manu: Syntactic sugar that folks have come to expect... easier to write code based off of it.
[10:41]	<manu1>	markus: How is re-introducing @datatype different from what we have now?
[10:41]	<manu1>	gregg: You can't override @datatype like you can override @type.
[10:41]	<manu1>	niklas: Even in JSON Schema, there is a different between datatype given and relation to an object type.
[10:41]	<manu1>	niklas: Even with JSON schema, which has nothing to do with RDF, there is a distinction.
[10:43]	<niklasl>	.. re. json schema; they have "format": http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
[10:45]	<niklasl>	.. in json-schema: format is defined as "This property defines the type of data, content type, or microformat to be expected in the instance property values"
[10:46]	<manu1>	Postponing decision on ISSUE-91 - topics that we need to address: 1) if we want to reintroduce @datatype, 2) if keywords can be redefined, 3) if there is an initial context that specifies '@type' as syntactic sugar (@type is just like any other property)
[10:46]	-->|	lgierth1 (~lgierth@89.246.67.229) has joined #json-ld
[10:48]	<manu1>	Topic: ISSUE-92: Limit JSON-LD properties to one @list per property
[10:48]	|<--	lgierth has left freenode (Ping timeout: 265 seconds)
[10:48]	<manu1>	https://github.com/json-ld/json-ld.org/issues/92
[10:49]	<gkellogg>	q+
[10:49]	<voip-ld>	Added gkellogg to the speaker queue: gkellogg
[10:49]	<manu1>	ack gkellogg
[10:49]	<voip-ld>	gkellogg has the floor. The speaker queue is empty.
[10:50]	<manu1>	manu: A property can have at most one @list associated with it, that's what we're discussing here - due to complexity for supporting more - throw an exception if more than one @list is used.
[10:50]	<manu1>	gkellogg: I agree with that, there is another issue.
[10:51]	<manu1>	gkellogg: If there is a property that has @list coercion in it, then something in array form may need to be put into a list - we need to be consistent.
[10:51]	<manu1>	gkellogg: The main thing is what is the representation of @list in expanded form?
[10:51]	<manu1>	gkellogg: Can a property have more than one @list in it.
[10:51]	<manu1>	gkellogg: What is the expression in expanded form?
[10:52]	<manu1>	gkellogg: We have a pattern that is different from everything else we expand - if we show it in array form, it implies that we can have more than one element - clear that there can only be one list. It's an exception for the way values are treated in expanded form - additional complexity in processing algorithms.
[10:55]	<manu1>	gkellogg: You might have multiple properties that might expand to the same IRI, when you go to merge the arrays, it creates confusion on list order - two different lists or multiple values in the same list?
[10:55]	<manu1>	gkellogg: This is an issue in expansion.
[10:55]	<manu1>	markus: In expansion, it is just 3 separate lists, right?
[10:56]	<manu1>	gkellogg: There are cases where you may have conflation - it may be 3 separate lists, or it may be one list.
[10:56]	<niklasl>	q+
[10:56]	<voip-ld>	Added niklasl to the speaker queue: niklasl
[10:56]	<manu1>	gkellogg: I don't see a use case that requires more than one list in most cases - if you take that as a concern, then the representation is a single object - I'd rather see it as an array that holds a single object, not just a single object.
[10:57]	<manu1>	gkellogg: I don't think we want to go into the discussion on supporting multiple lists of lists unless there is a compelling use case.
[10:57]	<manu1>	gkellogg: Lists containing lists is extremely complicated.
[10:57]	<manu1>	ack niklasl
[10:57]	<voip-ld>	niklasl has the floor. The speaker queue is empty.
[10:57]	<niklasl>	.. http://spinrdf.org/sp.html#sp-Union
[10:57]	<manu1>	niklas: I think I agree from a practical point of view - one very strange real-world use case ^^^
[10:58]	<manu1>	niklas: Really don't expect that to be used in JSON-LD. We should know that there is at least one case, and we should throw an exception in that case.
[10:59]	<manu1>	markus: Could we split this into sub-issues - one for compaction, one for expansion.
[11:03]	<niklasl>	.. {"prop-iri": [{"@list": [1, 2]}]}
[11:03]	<manu1>	manu: I wonder if we should push this decision off.
[11:03]	<manu1>	gregg: We should be able to discuss how expanded form should look.
[11:05]	<manu1>	PROPOSAL: When performing expansion properties that are coerced to a @container type of @list MUST be placed in an array in expanded form. For example, "prop-iri": [{"@list": [1, 2]}] is correct, "prop-iri": {"@list": [1, 2]} is not.
[11:05]	<gkellogg>	+1
[11:05]	<manu1>	+1
[11:05]	<mlnt>	+1
[11:05]	<niklasl>	+1
[11:05]	<manu1>	RESOLVED: When performing expansion properties that are coerced to a @container type of @list MUST be placed in an array in expanded form. For example, "prop-iri": [{"@list": [1, 2]}] is correct, "prop-iri": {"@list": [1, 2]} is not.
[11:06]	<manu1>	gkellogg: This was creating more corner-cases for us.
[11:06]	<manu1>	gkellogg: This will simplify the algorithm.
[11:06]	|<--	lgierth1 has left freenode (Ping timeout: 265 seconds)
[11:07]	<manu1>	markus: Maybe dlongley could add explicit examples.
[11:07]	<manu1>	Topic: ISSUE-93: Keyword aliasing operation
[11:07]	<manu1>	https://github.com/json-ld/json-ld.org/issues/93
[11:08]	<manu1>	manu: Markus raises four questions - 1) Can multiple aliases exist for a keyword? 2) Why is aliasing of @context disallowed? 3) Are aliased keywords supported within a context? 4) How is this processed during contextprocessing/expansion/ compaction
[11:10]	<manu1>	manu: I think we should allow multiple aliases for a keyword, don't know for #2, I think we only support aliases being used outside the context, defer to Gregg and Longley on #4
[11:11]	<manu1>	markus: I agree with Dave and Gregg after discussion with them.
[11:11]	<manu1>	PROPOSAL: JSON-LD supports multiple aliases for a JSON-LD keyword.
[11:11]	<gkellogg>	+1
[11:11]	<manu1>	+1
[11:11]	<niklasl>	+1
[11:11]	<mlnt>	+1
[11:12]	<manu1>	RESOLVED: JSON-LD supports multiple aliases for a JSON-LD keyword.
[11:13]	<manu1>	PROPOSAL: Re-affirm that the aliasing of @context is disallowed due to algorithmic complexity/ambiguity and lack of a compelling use case.
[11:13]	<manu1>	+1
[11:13]	<mlnt>	+1
[11:13]	<niklasl>	+1
[11:13]	<gkellogg>	+1
[11:14]	<manu1>	RESOLVED: Re-affirm that the aliasing of @context is disallowed due to algorithmic complexity/ambiguity and lack of a compelling use case.
[11:17]	<manu1>	PROPOSAL: A @context is processed without regard to keyword aliases. Keyword aliases are taken into account when processing the body of a JSON-LD document.
[11:17]	<mlnt>	+1
[11:17]	<gkellogg>	+1
[11:17]	<niklasl>	+1
[11:17]	<manu1>	+1
[11:17]	<manu1>	RESOLVED: A @context is processed without regard to keyword aliases. Keyword aliases are taken into account when processing the body of a JSON-LD document.
[11:18]	<manu1>	The group notes that the processing rules for compaction, expansion and framing are not affected by the previous 3 decisions.
[11:18]	<manu1>	Topic: ISSUE-99: @graph treatment when expanding
[11:18]	<manu1>	https://github.com/json-ld/json-ld.org/issues/99
[11:19]	<manu1>	gregg: I think that everyone agrees that the only time that @graph is dropped is when it is the only property expressed in a top-level object other than @context.
[11:21]	<manu1>	The current proposal is: If @graph is the only property in the document's top level object, it MUST be dropped in expansion and compaction. In all other cases (which includes @graph at the document's top level object when there are other properties at the same level), @graph MUST NOT be dropped in expansion and compaction.
[11:21]	<manu1>	manu: I'm concerned about how the RDF WG will react to this - may be controversial.
[11:22]	<manu1>	manu: This will affect normalization.
[11:23]	<manu1>	gkellogg: We need to be able to express graphs - Wikidata folks need this - we don't want to not solve that application because we haven't yet solved the graph issue.
[11:24]	<manu1>	gkellogg: this isn't a big complication to any of our algorithms
[11:24]	<manu1>	gkellogg: The interpretation when it comes to RDF is the tricky part - but I don't see it as that tricky
[11:25]	<manu1>	PROPOSAL: If @graph is the only property in the document's top level object, it MUST be dropped in expansion and compaction. In all other cases (which includes @graph at the document's top level object when there are other properties other than @context at the same level), @graph MUST NOT be dropped in expansion and compaction.
[11:25]	<gkellogg>	+1
[11:25]	<mlnt>	+1
[11:25]	<manu1>	+1
[11:25]	<niklasl>	+1 with a bit of faith
[11:25]	<manu1>	RESOLVED: If @graph is the only property in the document's top level object, it MUST be dropped in expansion and compaction. In all other cases (which includes @graph at the document's top level object when there are other properties other than @context at the same level), @graph MUST NOT be dropped in expansion and compaction.
[11:26]	<voip-ld>	Niklas Lindstr√∂m (SIP/10.10.73.138-00000064) has left the conference.
[11:27]	<manu1>	manu: Those were all the discussions related to syntax, now on to API issues.
[11:27]	<manu1>	Topic: ISSUE-58: Specifying the active context for compaction
[11:27]	<manu1>	https://github.com/json-ld/json-ld.org/issues/58
[11:29]	|<--	niklasl has left freenode (Quit: thanks for the good call)
[11:30]	<manu1>	manu: We are starting to have a great number of options for these API methods
[11:33]	<manu1>	gregg: We should probably put these in options.
[11:33]	<manu1>	Markus: What about mandatory arguments, like the context for compaction, or the base IRI?
[11:35]	<manu1>	gregg: We should discuss allowing passing IRIs or file objects to the compaction, expansion, etc. algorithms.
[11:35]	<manu1>	manu: That's new, we'll have to discuss the signatures for these methods.
[11:40]	<manu1>	manu: Should we focus the API on higher-level languages only?
[11:40]	<manu1>	gregg: I think so.
[11:45]	<manu1>	Discussion around arguments to API methods - whether there should be an 'option' object, or if mandatory options should be separate from 'options', such as the compacting context in the call to .compact().
[11:50]	<manu1>	Discussion concerning what the arguments can be for the input parameters.
[11:53]	<mlnt>	http://dev.w3.org/2006/webapi/WebIDL/#idl-union
[11:53]	<mlnt>	(float or float[])
[11:54]	<manu1>	PROPOSAL: The first input parameter for all JSON-LD API methods MAY be an object, an array of objects, or an IRI (DOMString).
[11:55]	<mlnt>	+1
[11:55]	<manu1>	+1
[11:55]	<gkellogg>	+1
[11:55]	<manu1>	RESOLVED: The first input parameter for all JSON-LD API methods MAY be an object, an array of objects, or an IRI (DOMString).
[11:57]	<manu1>	PROPOSAL: The second input parameter to the .compact() method is the context that should be used for compaction. The value can be either an object or an IRI.
[11:57]	<manu1>	+1
[11:57]	<gkellogg>	+1
[11:57]	<mlnt>	+1
[11:57]	<gkellogg>	+1
[11:57]	<manu1>	RESOLVED: The second input parameter to the .compact() method is the context that should be used for compaction. The value can be either an object or an IRI.
[11:57]	<manu1>	PROPOSAL: The second input parameter to the .frame() method is the frame that should be used for compaction. The value can be either an object or an IRI.
[11:57]	<gkellogg>	+1
[11:57]	<mlnt>	+1
[11:58]	<manu1>	+1
[11:58]	<manu1>	RESOLVED: The second input parameter to the .frame() method is the frame that should be used for compaction. The value can be either an object or an IRI.
[11:59]	<manu1>	Topic: ISSUE-57: Should @context be minimized when compacting?
[11:59]	<manu1>	https://github.com/json-ld/json-ld.org/issues/57
[11:59]	<mlnt>	PROPOSAL: If the optimize flag is not set, the context used for compaction MUST be included without modifications in the resulting document. This applies to both context objects as well as contexts specified by passing an IRI. If the optimize flag is set, a processor is free to modify the context in order to optimize the resulting document body.
[11:59]	<manu1>	Markus: I think we all agree on this...
[11:59]	<gkellogg>	+1
[11:59]	<mlnt>	+1
[11:59]	<manu1>	+1
[12:00]	<manu1>	RESOLVED: If the optimize flag is not set, the context used for compaction MUST be included without modifications in the resulting document. This applies to both context objects as well as contexts specified by passing an IRI. If the optimize flag is set, a processor is free to modify the context in order to optimize the resulting document body.
[12:00]	<voip-ld>	Markus Lanthaler (SIP/sip.linphone.org-00000061) has left the conference.
[12:00]	<voip-ld>	Gregg Kellogg (SIP/10.0.1.18-00000062) has left the conference.
[12:00]	* manu1	2 hours!
[12:00]	* manu1	call back in if you can.
[12:00]	<voip-ld>	Manu Sporny (SIP/6000-00000063) has left the conference.
[12:00]	<voip-ld>	Markus Lanthaler (SIP/sip.linphone.org-00000066) has joined the conference.
[12:00]	<voip-ld>	Gregg Kellogg (SIP/10.0.1.18-00000067) has joined the conference.
[12:01]	|<--	bergie has left freenode (Ping timeout: 260 seconds)
[12:01]	<voip-ld>	Manu Sporny (SIP/6000-00000068) has joined the conference.
[12:02]	<manu1>	Topic: ISSUE-53: Remove normalization completely from JSON-LD API spec
[12:02]	<manu1>	https://github.com/json-ld/json-ld.org/issues/53
[12:04]	<manu1>	Discussion about how this would be implemented across specification documents.
[12:04]	<manu1>	gkellogg: We don't need normalization in the JSON-LD API, it belongs in a normalization API.
[12:06]	<voip-ld>	David I. Lehn (SIP/96.240.182.44-00000065) has left the conference.
[12:06]	<voip-ld>	David I. Lehn (SIP/96.240.182.44-00000069) has joined the conference.
[12:07]	<manu1>	manu: So the 'normalization spec' should describe how to normalize RDF graphs and it should outline an API call to get back a list of quads that is normalized and sorted.
[12:09]	<manu1>	manu: other issue is which bits to pull from the RDF API spec.
[12:11]	<manu1>	PROPOSAL: Remove the normalization algorithm and API from the JSON-LD API specification. The normalization algorithm will be placed into a separate RDF Graph Normalization specification which contains an API for retrieving a set of normalized statements.
[12:11]	<manu1>	+1
[12:11]	<mlnt>	+1
[12:11]	<gkellogg>	+1
[12:11]	<manu1>	RESOLVED: Remove the normalization algorithm and API from the JSON-LD API specification. The normalization algorithm will be placed into a separate RDF Graph Normalization specification which contains an API for retrieving a set of normalized statements.

