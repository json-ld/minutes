[10:01]	<manu1>	Agenda: http://lists.w3.org/Archives/Public/public-linked-json/2012Aug/0011.html
[10:02]	<manu1>	scribe: manu1
[10:03]	<manu1>	manu: Anything else that needs to be on the agenda?
[10:03]	<manu1>	Topic: JSON-LD at NoSQL conference
[10:03]	<manu1>	gregg: I'm talking at the NoSQL conference, please review my slides.
[10:03]	<manu1>	manu: What's the strategy with this talk?
[10:04]	<manu1>	gregg: Stay away from the algorithms, introducing the concepts - expanded form / compacted form - discussion on how to get to compacted form. Benefits between expanded and compacted form.
[10:05]	<manu1>	gregg: Integration w/ JSON-LD w/ databases like MongoDB or CouchDB - use references, use object-level granularity, graphify() vs. other approaches to working with the data.
[10:05]	<manu1>	gregg: Tying into backbone.js - trying to retrieve from DB, map to model (backbone), and display. Mostly practical experience and how to use JSON-LD in production code.
[10:06]	<manu1>	gregg: I've built a serialization of schema.org and other stuff into JSON-LD serialization... which feeds Backbone application that gives cool documentation for all of the API points - used constraints quite a bit to give more structure. Also built an object editor - object model defined by schema... helps create/edit/validate all object instances, which are then stores in MongoDB collection.
[10:07]	<manu1>	gregg: Any app built on any schema, very useful.
[10:07]	<manu1>	manu: Would you be able to put it out as open source at some point?
[10:07]	<manu1>	gregg: I think so.
[10:07]	<manu1>	gregg: Did lots of the backend in CoffeeScript.
[10:08]	<manu1>	niklas: Yeah, CoffeeScript is nice... also use JavaScript. Nicer to work in CoffeeScript.
[10:03]	<manu1>	Topic: In-memory JSON-LD object representation
[10:08]	<manu1>	gregg: This type of application shows the advantages of Linked Data models... I think I'd like .link() instead of .graphify() because that's what you're really doing here.
[10:09]	<manu1>	gregg: When I edit a specific object, I can do a query to get back any object that has a relationship to a particular object... then tie them together using .link() - pretty useful term for what I'm doing.
[10:09]	<manu1>	niklas: I use .connect() in my RDFa experiment.
[10:10]	<manu1>	niklas: In my RDF lab - simple idea - a schema vocabulary presentation and then some kind of editor. Did this years ago, but would like to try it out w/ JSON-LD approach.
[10:11]	<niklasl>	http://niklasl.github.com/rdfa-lab/examples/rdfa-dom-usage
[10:12]	<manu1>	niklasl: I use an HTML5 data-* attribute to store the expanded version of the RDFa data...
[10:12]	<manu1>	niklasl: I go from RDFa to JSON-LD directly...
[10:13]	<manu1>	niklas: I'll eventually put all of this up on the wiki - real goal of this experiment is to put more of the parser logic into the DOM API to eventually be able to produce JSON-LD from the DOM API.
[10:13]	<manu1>	niklas: I think it'll be pretty small amount of JavaScript.
[10:13]	<manu1>	niklas: Trying to find a balance between logic needed to extract @context from DOM and what the current term represents.
[10:14]	<manu1>	niklas: If it has a subject that comes from a subject element, these things can be put together simply w/o extracting triples... conversion to JSON-LD should be easy.
[10:14]	<manu1>	niklas: The goal of the DOM API is to navigate through the DOM using RDF concepts.
[10:15]	<manu1>	manu: Yes, that's good - extracting JSON-LD is very good.
[10:16]	<manu1>	niklas: The Microdata API actually gives you back elements carrying the properties, then if you do .toJSON() you get the JSON representation at that point. It dawned on me that that may be the way forward for the DOM API. You want to be able to navigate the HTML elements using RDFsubjects/objects/ etc.
[10:16]	<manu1>	manu: Ok, anything else to add to the Agenda before we start?
[10:17]	<manu1>	Topic: @language / @vocab Intransitivity
[10:17]	<manu1>	niklas: It might make sense to make @vocab and @language intransitive? If you inherit a context from another context, you don't necessarily inherit the @language. If you have a @context which sets the language, you don't see that. Maybe the closest context should affect the language.
[10:19]	<manu1>	manu: my concern is that it complicates things (@language acts differently in different places) and prevents certain things from working (like being able to set @language in @context).
[10:19]	<manu1>	niklasl: Is @vocab in there now?
[10:19]	<manu1>	gregg: Yes, it's in there now, Markus added it.
[10:20]	<manu1>	gregg: Also, there is now spec text for a more formal description of JSON-LD...
[10:20]	<manu1>	manu: Yes, haven't had a chance to look at it yet, hope to do so tsoon.
[10:20]	<manu1>	gregg: I haven't pinged Andy Seaborne on it yet...
[10:22]	<manu1>	manu: Yes, we need to publish a new Working Draft via RDF WG as well - we should do it soon.
[10:22]	<niklasl>	https://github.com/RDFLib/rdflib-jsonld
[10:23]	<manu1>	niklas: I updated the JSON-LD implementation for rdflib.
[10:23]	<manu1>	Topic: ISSUE-80: Remove initial context from API spec
[10:23]	<manu1>	https://github.com/json-ld/json-ld.org/issues/80
[10:24]	<manu1>	manu: I think we left it at: Gregg and me wanting to put it in the spec, Markus and Niklas not wanting to put it into the spec.
[10:24]	<manu1>	niklasl: It might be nice to have xsd and rdf pre-defined..
[10:24]	<manu1>	gkellogg: Maybe schema as well?
[10:25]	<manu1>	gkellogg: I end up setting @vocab to "http://schema.org/" for most of what we're doing.
[10:25]	<manu1>	niklasl: I don't think we should do that (set @vocab to schema.org)
[10:27]	<manu1>	manu: It might be helpful to have pre-defined terms, but it might also make it more difficult to understand JSON-LD
[10:28]	<manu1>	niklasl: We might want to "level the ground" to not have implicit prefixes... if we decide to have an initial context, it should be able to completely cancel it by setting "@context": [null, x, y z]
[10:28]	<manu1>	gkellogg: I rarely use "rdf" namespace in JSON-LD. One advantage of JSON-LD is that there is support for datatypes. If you do any support for datatypes, you need "xsd". I continue to forget to include it and I have to go and look up the URI.
[10:29]	<manu1>	gkellogg: I think that having "xsd" as a pre-defined term in the initial context would be very useful, avoid many easy mistakes.
[10:30]	<manu1>	markus: You don't really use "xsd" that often... mostly for dates.
[10:30]	<manu1>	gkellogg: I also use it for owl serialization stuff - most of the cardinality stuff are unsigned integers.
[10:31]	<manu1>	gkellogg: You have to declare something - not a typical usage pattern.
[10:31]	<manu1>	niklasl: schema.org have defined their own datatypes, which are basically string-derived.
[10:32]	<manu1>	gkellogg: OWL definition they have they end up being object properties - it's not very useful. rdfs.org version is much better in that regard, doesn't contain as much ranging information.
[10:32]	<manu1>	gkellogg: Interesting to note that you can't really do this modeling round-tripping in Microdata.
[10:33]	<manu1>	niklas: Take a look at the RDFa representation, they don't use rdfs:range and rdfs:domain... they use schema:range and schema:domain.
[10:33]	<manu1>	q+ to get back to initial context
[10:33]	<voip-ld>	Added manu1 to the speaker queue: manu1
[10:34]	<manu1>	ack manu1
[10:34]	<voip-ld>	manu1 has the floor (to get back to initial context). The speaker queue is empty.
[10:35]	* niklasl	is sleep deprived, making me prone to digress ;]
[10:36]	<manu1>	markus: This is convenient - but I don't think prefixes are one of the "good" features of JSON-LD.
[10:36]	<gkellogg>	q+ about prefixes
[10:36]	<voip-ld>	Added gkellogg to the speaker queue: gkellogg
[10:36]	<manu1>	markus: I think that w/o prefixes, they don't have value for you - and they may clash.
[10:36]	<manu1>	niklas: I think that if we add prefixes - anything used as a prefix cannot be used as a default term unless you reset it, they will collide.
[10:37]	<manu1>	niklas: Maybe we discussed this before - possibility of defining a term w/ a trailing colon to mean "only use this as a prefix, never a term".
[10:37]	<manu1>	markus: Argument against that is "no microsyntaxes"
[10:37]	<manu1>	niklas: There was a collision which would be preventable w/o the term. I defined a thing to use as a prefix locally, to make term declarations simpler/more compact.
[10:38]	<manu1>	niklas: The problem was that I did not want the prefix to be used later on in general, it ended up somewhere I wanted to use it.
[10:38]	<manu1>	ack gkellogg
[10:38]	<voip-ld>	gkellogg has the floor (about prefixes). The speaker queue is empty.
[10:38]	<manu1>	gkellogg: I do use prefixes a lot, mostly in context definition.
[10:39]	<manu1>	gkellogg: Within data, I rely on terms for things I explicitly use in my code. When I do things to work w/ more generic data, terms/curies don't impact me at all. When working with multiple vocabs, better to keep things in a CURIE syntax.
[10:39]	<manu1>	q+ to discuss CURIE usage and xsd.
[10:39]	<voip-ld>	Added manu1 to the speaker queue: manu1
[10:39]	<manu1>	gkellogg: Translation from TURTLE is more natural when using CURIEs as long as you have access to prefix definitions.
[10:39]	<manu1>	markus: In that case, there is no danger for forgetting declaration - comes from TURTLE.
[10:40]	<manu1>	gkellogg: I was responding to "CURIEs not very useful" statement.
[10:40]	<manu1>	gkellogg: I think the only one that needs to be in there is XSD.
[10:40]	<manu1>	ack manu1
[10:40]	<voip-ld>	manu1 has the floor (to discuss CURIE usage and xsd.). The speaker queue is empty.
[10:41]	<niklasl>	q+ to compare with turtle (which doesn't have any default prefixes afaik)
[10:41]	<voip-ld>	Added niklasl to the speaker queue: niklasl
[10:42]	<manu1>	ack niklasl
[10:42]	<voip-ld>	niklasl has the floor (to compare with turtle (which doesn't have any default prefixes afaik)). The speaker queue is empty.
[10:43]	<manu1>	manu: I think I don't want an initial context in there now... you only need "xsd" when you are declaring contexts, you don't do that that often.
[10:43]	<manu1>	manu: If we really need to put this feature in, then we can do so in the implementations later on.
[10:44]	<manu1>	gkellogg: At this point, I don't feel strongly enough to object to not having it. My feeling is that it does more good than harm... but I'll just do a -0 on a resolution.
[10:44]	<manu1>	PROPOSAL: Do not support an initial context in JSON-LD 1.0.
[10:44]	<manu1>	+1
[10:44]	<niklasl>	+0.75
[10:44]	<mlnt>	+1
[10:44]	<gkellogg>	-0
[10:44]	<manu1>	RESOLVED: Do not support an initial context in JSON-LD 1.0.
[10:45]	<manu1>	Topic: ISSUE-150: Use of native types in from/to RDF
[10:45]	<manu1>	https://github.com/json-ld/json-ld.org/issues/150
[10:46]	<manu1>	Markus: before we decided to have a "useNativeTypes" flag in the fromRDF() algorithm, it automatically assumes we're using "xsd:boolean", "xsd:double", etc.
[10:46]	<manu1>	Markus: Dave Longley proposed to split that flag into 4 different flags that specify the datatype for each of the native types... one flag for integers (maps by default toxsd:integer), and so on.
[10:46]	<manu1>	Markus: The question is whether or not we want to do that.
[10:48]	<manu1>	gkellogg: It's been several months since this came up - but adding flags to the RDF serialization makes it a little bit crufty and unwieldy. I'd rather come up with a set of practices that are just constrained to the RDF serialization. Let's just fix these things, if you're transforming an integer fromRDF() to RDF, you can represent it fairly easily in TURTLE (as an integer).
[10:48]	<manu1>	Markus: The question is in the other direction - if you're doing fromRDF() and you want to convert "unsigned integers" to "integers", then you would want to do this.
[10:49]	<manu1>	gkellogg: I don't find the value to represent this as a non-negative integer as something else.
[10:50]	<manu1>	manu: My concern is that we're closing off some use case by not allowing this to happen.
[10:51]	<manu1>	gkellogg: If everything I was doing was using the JSON-LD API, then everything I was doing through the API calls...
[10:51]	<manu1>	gkellogg: I have an RDF distiller, it hasn't needed any special attributes for any particular serialization.
[10:52]	<manu1>	gkellogg: I think that my serializes for TURTLE do not make use of the native representation for these things by default. There might be some tools, but I use string representations for things.
[10:52]	<niklasl>	q+
[10:52]	<voip-ld>	Added niklasl to the speaker queue: niklasl
[10:53]	<niklasl>	q-
[10:53]	<voip-ld>	Removed niklasl from the speaker queue: (empty)
[10:53]	<manu1>	Markus: I think the question is if we want to decouple JSON-LD from XSD. For example, schema.org uses their own datatypes.
[10:54]	<manu1>	manu: Two arguments here - complexity vs. flexibility
[10:54]	<manu1>	gregg: Going from RDF to JSON-LD, that's a different issue - we don't make use of native datatypes when transforming from RDF to JSON-LD.
[10:56]	<manu1>	manu: My concern is that JavaScript developers expect stuff to be converted to native types.
[10:57]	<manu1>	niklas: I see cases for both sides of this argument. I mainly agree with Gregg - there is a standard way to say what types are in RDF.
[10:58]	<manu1>	gkellogg: I might provide some interfaces to provide greater fidelity. I'd put a flag in there that says "use native datatype representations".
[10:59]	<manu1>	gkellogg: We could say that "implementations may provide a mechanism that allows these representations to be overridden."
[11:00]	<niklasl>	q+
[11:00]	<voip-ld>	Added niklasl to the speaker queue: niklasl
[11:01]	<manu1>	ack niklasl
[11:01]	<voip-ld>	niklasl has the floor. The speaker queue is empty.
[11:01]	<manu1>	manu: Okay - so we could just keep 'useNativeDatatypes', specify how to do the conversion, and add this feature in later.
[11:02]	<mlnt>	http://json-ld.org/spec/latest/json-ld-api/#jsonldoptions
[11:03]	<manu1>	PROPOSAL: Continue to support 'useNativeDatatypes' in .fromRDF(), specifying how the native type conversion happens. Do not support options for overriding each native datatype with a different value.
[11:03]	<gkellogg>	+1
[11:04]	<manu1>	+1
[11:04]	<niklasl>	+1
[11:04]	<mlnt>	+1
[11:04]	<manu1>	RESOLVED: Continue to support 'useNativeDatatypes' in .fromRDF(), specifying how the native type conversion happens. Do not support options for overriding each native datatype with a different value.
[11:04]	<manu1>	NOTE: If this feature needs to be added in the future, it can be done without creating any backwards-compatability issues.
[11:05]	<manu1>	Topic: ISSUE-151: Context Processing Algorithm Dependency Resolution
[11:05]	<manu1>	https://github.com/json-ld/json-ld.org/issues/151
[11:05]	<manu1>	manu: The main issue is this, if you define something like so in the @context: "schema": "http://schema.org/"
[11:05]	<manu1>	manu: and then later you do this: "name": "schema:name"
[11:09]	<manu1>	manu: Dave Longley is concerned that there are some corner cases that could lead to implementations doing two different things.
[11:10]	<manu1>	gkellogg: I'm concerned that we don't need to spec everything down to this level of details. Oddly construed examples could be placed into the test suite - that could catch these implementation issues.
[11:10]	<manu1>	gkellogg: This sounds like an error condition that we want to signal, not that everyone can resolve this stuff in the same way.
[11:11]	<manu1>	Markus: It's difficult to understand what the algorithms are supposed to do w/o implementing them... if you do implement them, every implementation is doing exactly the same thing.
[11:11]	<manu1>	gkellogg: The risk is that we don't get good analysis from people that don't implement it.
[11:12]	<manu1>	niklas: I'm leaning towards gregg's notion - a bit more lenience in how to implement an algorithm and ensure that test cases cover all the corner cases that might crop up is the best approach. We may want a comment in the spec about edge cases - state the intent in the algorithm.
[11:12]	<manu1>	gkellogg: We could put more detail in an algorithm in the appendix would be better. We don't want to subject readers to all the corner cases that we're trying to document.
[11:13]	<dlongley>	i think that if you follow the algorithm in the spec you should pass the test suite
[11:13]	<mlnt>	I agree
[11:13]	<niklasl>	me too...
[11:14]	<voip-ld>	Dave Longley (SIP/6002-00000045) has joined the conference.
[11:14]	<manu1>	niklas: I'd probably be a +0 on this, leaving too much to interpretation is dangerous.
[11:16]	<dlongley>	one sec
[11:16]	<dlongley>	was talking ... not working.
[11:16]	* manu1	still can't hear you.
[11:17]	<voip-ld>	Dave Longley (SIP/6002-00000045) has left the conference.
[11:18]	<dlongley>	software issues over here.
[11:18]	<manu1>	gkellogg: I'd like to see some spec text, if it's simple then fine... if it's complex, then not okay.
[11:18]	<dlongley>	i was going to say that other specifications , in my experience, generally spell out how to write a fully conformant processor
[11:18]	<manu1>	manu: We'll ask Dave Longley to send some spec text to RDF comments.
[11:19]	<dlongley>	and that, at least when i'm reading a spec to try and implement it, i'd prefer it to be that way
[11:19]	<dlongley>	i think one should be able to just read the spec, following the language --- and write code as you go, resulting in something that passes the test suite.
[11:19]	<dlongley>	if you want to go off on your own and change the algorithm or try and improve upon it, that's fine (and encouraged, i'd think)
[11:20]	<dlongley>	but, at a minimum, i don't think implementors should have to figure out their own algorithms if they don't want to
[11:20]	<manu1>	ACTION: Dave Longley to send suggested spec text to modify the algorithm to public-rdf-comments@w3.org
[11:20]	<dlongley>	i do think it's somewhat annoying to write the spec language :), however, i don't think that that is a good reason to not do it
[11:20]	* manu1	are you fine with that, dlongley?
[11:20]	<dlongley>	yes
[11:21]	<manu1>	gkellogg: To respond to Dave Longley, there has been some evidence that spec algorithm complexity has prevented folks from getting into the specs a bit further.
[11:21]	<manu1>	gkellogg: I'd like them to be able to participate w/o being buried in details.
[11:21]	<manu1>	gkellogg: I have an action to annotate RDF algorithms to make it more clear about what's going on.
[11:22]	<dlongley>	prevented implementors from getting into the specs or users of the APIs?
[11:22]	<dlongley>	because i think that might be a presentation issue if it's just the users of the APIs
[11:23]	<dlongley>	i can see it being frustrating, when writing an implementation, that you don't pass the test suite ...
[11:23]	<dlongley>	and the spec document doesn't spell out why
[11:23]	<dlongley>	i don't think that's something that an implementor wants to spend their time on
[11:23]	<dlongley>	i guess i'm ok with the spec spelling it out in another section ... but i don't know what that really buys us
[11:24]	<dlongley>	and that it might just make it more complex to implement (having to jump around the spec to find caveats, etc)
[11:24]	<niklasl>	q+
[11:24]	<voip-ld>	Added niklasl to the speaker queue: niklasl
[11:24]	<manu1>	manu: I think there are good arguments from both sides - algorithms too high-level, interoperability problems. algorithms too low-level, hard for people to contribute.
[11:25]	<manu1>	gkellogg: I do agree that test cases shouldn't come out of nothing... there should be spec text backing them up. Having test cases should protect against some of these corner cases. Balancing act.
[11:25]	<manu1>	ack niklasl
[11:25]	<voip-ld>	niklasl has the floor. The speaker queue is empty.
[11:26]	<manu1>	niklas: I wonder if there is room for internal re-factoring? For example, in RDFa algorithm there are references from high-level text (in the algorithm) to low-level text in the spec (elsewhere in the spec).
[11:27]	<dlongley>	if we simply spell out that prefix dependencies have to be resolved and cycles must generate errors -- and then we craft test cases that expose the corner cases, then i can compromise and agree to that.
[11:28]	<manu1>	Manu: Dave, yeah, I think that's where we are right now.
[11:28]	<dlongley>	i worry that we don't currently have those corner cases -- and that it's difficult to generate them, however. (doesn't mean they won't show up in the real world)
[11:29]	<manu1>	gkellogg: I think the term selection algorithm is an example of this right now, it's very complicated. We could simplify it, but the result might not be that desirable when faced with complicated input.
[11:30]	<manu1>	niklas: I think the important part is that when the data is very complex, you want to make each part distinct. created/date and created/datetime are important to differentiate in complex data.
[11:30]	<manu1>	gkellogg: I'm concerned about the geometric complexity that is added when we support all of these corner cases, we may just want to punt on some of this stuff.
[11:31]	<dlongley>	another thing to be concerned with is that if we don't spec some of this stuff out, then the algorithms that are in the spec might be fundamentally incompatible with a working implementation
[11:31]	<dlongley>	as in, if we have a very detailed way of looping over keys in a context during processing ... but in order to properly resolve dependencies we must not loop (not saying this is the case)
[11:32]	<dlongley>	then we've spec'd out something that doesn't actually work when you take into consideration the other parts of the spec that aren't spec'd in detail.
[11:32]	<manu1>	Manu: Okay, that's the call for today, we'll meet again next week.
[11:33]	<voip-ld>	Manu Sporny (SIP/6000-00000040) has left the conference.
[11:33]	<voip-ld>	Gregg Kellogg (SIP/10.0.1.18-00000043) has left the conference.
[11:33]	<voip-ld>	Markus Lanthaler (SIP/sip.linphone.org-00000042) has left the conference.
[11:33]	<voip-ld>	Niklas Lindström (SIP/192.168.3.15-00000041) has left the conference.
